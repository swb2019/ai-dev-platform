#!/usr/bin/env bash
set -euo pipefail

# Creates an isolated project workspace derived from the AI Dev Platform sources.
# The resulting directory omits platform governance tooling (deploy/, infra/, .github/, etc.)
# and strips all Git metadata so agents can work without touching the immutable platform repo.

usage() {
  cat <<'USAGE'
Usage: scripts/agent/create-project-workspace.sh [options]

Options:
  --name NAME            Name for the new workspace (default: project-YYYYmmdd-HHMMSS)
  --destination PATH     Parent directory for workspaces (default: <repo>/../project-workspaces)
  --remote URL           Optional git remote to add inside the new workspace
  --with-platform-files  Include platform governance directories (deploy/, infra/, .github/) in the copy
  --help                 Show this help message

Example:
  scripts/agent/create-project-workspace.sh --name demo --remote git@github.com:me/demo.git
USAGE
}

WORKSPACE_NAME=""
DESTINATION_ROOT=""
REMOTE_URL=""
INCLUDE_PLATFORM=false

while [[ $# -gt 0 ]]; do
  case "$1" in
    --name)
      WORKSPACE_NAME="$2"
      shift 2
      ;;
    --destination)
      DESTINATION_ROOT="$2"
      shift 2
      ;;
    --remote)
      REMOTE_URL="$2"
      shift 2
      ;;
    --with-platform-files)
      INCLUDE_PLATFORM=true
      shift
      ;;
    --help|-h)
      usage
      exit 0
      ;;
    *)
      echo "Unknown option: $1" >&2
      usage
      exit 1
      ;;
  esac
done

REPO_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
DEFAULT_DESTINATION_ROOT="${REPO_ROOT}/../project-workspaces"

if [[ -z "$WORKSPACE_NAME" ]]; then
  WORKSPACE_NAME="project-$(date +%Y%m%d-%H%M%S)"
fi

if [[ -z "$DESTINATION_ROOT" ]]; then
  DESTINATION_ROOT="$DEFAULT_DESTINATION_ROOT"
fi

DESTINATION_ROOT="$(mkdir -p "$DESTINATION_ROOT" && cd "$DESTINATION_ROOT" && pwd)"
WORKSPACE_PATH="${DESTINATION_ROOT}/${WORKSPACE_NAME}"

if [[ -e "$WORKSPACE_PATH" ]]; then
  echo "Target workspace path already exists: $WORKSPACE_PATH" >&2
  exit 1
fi

if ! command -v rsync >/dev/null 2>&1; then
  echo "rsync is required to create the project workspace." >&2
  exit 1
fi

echo "[workspace] Creating sandbox at $WORKSPACE_PATH"
mkdir -p "$WORKSPACE_PATH"

EXCLUDES=(
  ".git"
  ".gitignore"
  ".github"
  "deploy"
  "docs"
  "infra"
  "scripts/policy"
  "scripts/github-hardening.sh"
  "scripts/github-hardening.conf"
  "scripts/bootstrap-infra.sh"
  "scripts/configure-github-env.sh"
  "scripts/setup-all.sh"
  "scripts/onboard.sh"
  "scripts/windows"
  "tmp"
  "artifacts"
)

if [[ "$INCLUDE_PLATFORM" == true ]]; then
  EXCLUDES=(
    ".git"
    "tmp"
    "artifacts"
  )
fi

RSYNC_ARGS=(-a --human-readable)
for pattern in "${EXCLUDES[@]}"; do
  RSYNC_ARGS+=(--exclude "$pattern")
done

rsync "${RSYNC_ARGS[@]}" "${REPO_ROOT}/" "$WORKSPACE_PATH/"

# Remove any residual Git metadata that may be nested (worktrees, etc.).
find "$WORKSPACE_PATH" -type d -name ".git" -prune -exec rm -rf {} +

cat > "${WORKSPACE_PATH}/.platform-sandbox" <<EOF
This directory was generated by scripts/agent/create-project-workspace.sh.
Treat it as an isolated project workspace; it no longer tracks the upstream AI Dev Platform repository.
EOF

if [[ -n "$REMOTE_URL" ]]; then
  echo "[workspace] Initialising git repository"
  (
    cd "$WORKSPACE_PATH"
    git init >/dev/null
    git add .
    git commit -m "chore: scaffold project workspace from AI Dev Platform" >/dev/null
    git remote add origin "$REMOTE_URL"
  )
  echo "[workspace] Git repository initialised and remote 'origin' set to $REMOTE_URL"
else
  echo "[workspace] Git repository not initialised (no --remote provided)"
fi

cat <<SUMMARY

Workspace ready: $WORKSPACE_PATH

Next steps:
  1. Point the Codex/Claude agent at this directory instead of the platform repo.
  2. If you provided --remote, push your initial commit manually after reviewing the diff.
  3. Keep the platform repository read-only; only promote reviewed changes back via human-controlled workflows.

SUMMARY
